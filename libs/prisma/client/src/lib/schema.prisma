generator client {
  provider      = "prisma-client-js"
  output        = "../../../../../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DB_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  formResponses FormResponse[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ProductCategory {
  id             String   @id @default(uuid())
  name           String
  formPurchase   Form     @relation("FormPurchase", fields: [formPurchaseId], references: [id])
  formPurchaseId String   @unique
  formSearch     Form     @relation("FormSearch", fields: [formSearchId], references: [id])
  formSearchId   String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Form {
  id                      String           @id @default(uuid())
  questions               FormQuestion[]
  responses               FormResponse[]
  productCategoryPurchase ProductCategory? @relation("FormPurchase")
  productCategorySearch   ProductCategory? @relation("FormSearch")
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
}

model FormQuestion {
  id              String                       @id @default(uuid())
  form            Form                         @relation(fields: [formId], references: [id])
  formId          String
  title           String
  inputType       String
  answers         FormResponseAnswer[]
  visibilityRules FormQuestionVisibilityRule[] @relation("Question")
  dependentRules  FormQuestionVisibilityRule[] @relation("DependOnQuestion")
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
}

model FormQuestionVisibilityRule {
  id                 String       @id @default(uuid())
  question           FormQuestion @relation("Question", fields: [questionId], references: [id])
  questionId         String
  dependOnQuestion   FormQuestion @relation("DependOnQuestion", fields: [dependOnQuestionId], references: [id])
  dependOnQuestionId String
  requiredValue      String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model FormResponse {
  id          String               @id @default(uuid())
  user        User                 @relation(fields: [userId], references: [id])
  userId      String
  form        Form                 @relation(fields: [formId], references: [id])
  formId      String
  isCompleted Boolean              @default(false)
  answers     FormResponseAnswer[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model FormResponseAnswer {
  id         String       @id @default(uuid())
  question   FormQuestion @relation(fields: [questionId], references: [id])
  questionId String
  response   FormResponse @relation(fields: [responseId], references: [id])
  responseId String
  value      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}
